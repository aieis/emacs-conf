#+TITLE: MYINIT
#+AUTHOR: aieis
* Bootstrap
** Package Repositories
   #+BEGIN_SRC emacs-lisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
	    (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	   (bootstrap-version 6))
       (unless (file-exists-p bootstrap-file)
	 (with-current-buffer
	     (url-retrieve-synchronously
	      "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	      'silent 'inhibit-cookies)
	   (goto-char (point-max))
	   (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
     (setq-default straight-use-package-by-default t)
     (straight-use-package 'use-package)
     (use-package org :straight (:type built-in))
   #+END_SRC
* Defaults
** Default Options
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'default-frame-alist '(font . "Iosevka 10"))
     (column-number-mode t)
     (setq display-line-numbers-type t)
     (global-display-line-numbers-mode t)
     (set-scroll-bar-mode nil)
     (global-auto-revert-mode t)
     (global-hl-line-mode t)
     (blink-cursor-mode 0)
     (setq-default truncate-lines t)
     (setq-default indent-tabs-mode nil)
     (electric-pair-mode 1)
     (setq delete-old-versions t)
     (recentf-mode 1)
   #+END_SRC
   
** Bell
#+BEGIN_SRC emacs-lisp
  (defun aieis/terminal-visible-bell ()
    "A friendlier visual bell effect."
    (invert-face 'mode-line)
    (run-with-timer 0.1 nil 'invert-face 'mode-line))

  (setq visible-bell nil
        ring-bell-function 'aieis/terminal-visible-bell)
#+END_SRC
* Keyboard Keys
  #+BEGIN_SRC emacs-lisp
    (define-key global-map (kbd "C-M-j") #'aieis/insert-line-below)
    (define-key global-map (kbd "C-M-o") #'aieis/insert-line-above)
    (define-key global-map (kbd "C-k") #'aieis/kill-line-zero-space)

  #+END_SRC

** Undo Tree
   #+BEGIN_SRC emacs-lisp
     ;; (use-package undo-tree
     ;;   :init
     ;;   (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
     ;;   :config
     ;;   (global-undo-tree-mode))
   #+END_SRC
   
* Org Mode
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :config
      (define-key global-map (kbd "C-c a") 'org-agenda)
      (define-key global-map (kbd "C-c c") 'org-capture))

    (with-eval-after-load 'org
      (setq org-capture-templates
            `(("b"
               "Template for adding a task"
               entry
               (file+headline "tasks.org" "Refile")
               "* TODO %?"))))
  #+END_SRC
* COMMENT Completions
  #+BEGIN_SRC emacs-lisp
    (setq completions-format 'one-column)
    (defun aieis/in-completions ()
      (string-match-p "\\*Completions\\*" (buffer-name)))

    (defun aieis/next-completion ()
      (interactive)
      (if (aieis/in-completions)
          (if (eobp)
              (when-let ((mini (active-minibuffer-window))) (select-window mini))
            (next-completion 1))))

    (defun aieis/prev-completion ()
      (interactive)
      (if (aieis/in-completions)
          (if (bobp)
              (when-let ((mini (active-minibuffer-window))) (select-window mini))
          (next-completion -1))))

    (defun aieis/switch-to-completions-top ()
      (interactive)
      (switch-to-completions)
      (goto-line 1)
      (next-completion 1))

    (defun aieis/switch-to-completions-bot ()
      (interactive)
      (aieis/switch-to-completions-top)
      (next-completion -1))

    (define-key minibuffer-local-map (kbd "C-n") 'aieis/switch-to-completions-top)
    (define-key minibuffer-local-map (kbd "C-p") 'aieis/switch-to-completions-bot)
    (define-key completion-list-mode-map (kbd "C-n") 'aieis/next-completion)
    (define-key completion-list-mode-map (kbd "C-p") 'aieis/prev-completion)

  #+END_SRC
* Language Specifics
#+BEGIN_SRC emacs-lisp
  (defun aieis/js-mode-hook ()
    (setq js-indent-level 2))
  (add-hook 'js-mode-hook 'aieis/js-mode-hook)
  (defun aieis/c-mode-hook ()
    (setq c-basic-offset 4))
  (add-hook 'c-mode-hook 'aieis/c-mode-hook)
#+END_SRC
* Embark . Consult . Orderless . Marginalia
  #+BEGIN_SRC emacs-lisp
    (use-package orderless
      :custom (completion-styles '(orderless basic))
      (completion-category-overrides '((file (styles basic partial-completion)))))

    (use-package marginalia
      :config
      (marginalia-mode))

    (use-package embark
      :config
      (define-key global-map (kbd "C-;") #'embark-act)
      (define-key minibuffer-local-map (kbd "C-'") #'embark-collect-live)
      (define-key minibuffer-local-map (kbd "C-,") #'embark-become))

    (use-package consult
      :config
      (consult-customize consult-theme :preview-key '(:debounce 0.5 any)))

    (use-package embark-consult)

  #+END_SRC

* HELM
#+BEGIN_SRC emacs-lisp
  (use-package helm)
#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC
* Editing Functions
  #+BEGIN_SRC emacs-lisp
    (defun aieis/insert-line-below ()
      (interactive)
      (progn
        (move-end-of-line 1)
        (electric-newline-and-maybe-indent)))

    (defun aieis/insert-line-above ()
      (interactive)
      (progn
        (move-beginning-of-line 1)
        (open-line 1)))


    (defun aieis/kill-line-zero-space ()
      (interactive)
      (progn
        (kill-line)
        (just-one-space 0)
        (indent-for-tab-command)))

    (defun aieis/sudo-find-file (file)
      "Open FILE as root."
      (interactive
       (list (read-file-name "Open as root: ")))
      (find-file (if (file-writable-p file)
                     file
                   (concat "/sudo:root@localhost:" file))))
  #+END_SRC

* File Backups
  #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist '(("" . "~/.emacs.d/backup/")))
    (setq auto-save-file-name-transforms `((".*" "~/.emacs.d/saves/" t)))
    (setq lock-file-name-transforms `((".*" "~/.emacs.d/lockfiles/" t)))
  #+END_SRC
* Keyboard Overrides
** Window Movement
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "M-j") 'other-window)
  (define-key global-map (kbd "M-k") 'myprevious-window)
  (define-key global-map (kbd "M-J") 'delete-other-windows)

  (defun aieis/enlarge-window (&optional DELTA)
    (interactive)
    (or DELTA (setq DELTA 1))
    (enlarge-window (* DELTA 20)))

  (defun myprevious-window ()
      (interactive)
      (other-window -1))
#+END_SRC
** HELM
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'helm
        (global-set-key (kbd "M-x") #'helm-M-x)
        (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
        (global-set-key (kbd "C-x C-f") #'helm-find-files)
        (helm-mode 1))
#+END_SRC

* Window Display
** Window

   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :config
       (global-set-key (kbd "M-o") 'ace-window)
       (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
       (setq aw-background nil))

   #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (setq display-buffer-alist
          `(;;
            ("\\*.*shell\\*"
             (display-buffer-reuse-mode-window display-buffer-in-direction)
             (direction . right))	 
            ("\\*.*[C|c]ompilation.*\\*"
             (display-buffer-reuse-mode-window display-buffer-in-side-window)
             (side . right))
            ("\\*Embark Actions\\*"
             (display-buffer-reuse-mode-window display-buffer-at-bottom)
             (window-height . fit-window-to-buffer)
             (window-parameters . ((no-other-window . t)
                                   (mode-line-format . none))))
            ("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
             nil
             (window-parameters (mode-line-format . none)))
            ("\\*Org Agenda\\*" (display-buffer-reuse-mode-window display-buffer-in-side-window)
             (side . left))
            ("\\*Man .*\\*" (display-buffer-reuse-mode-window ) nil)))
   #+END_SRC

* File Association
#+BEGIN_SRC emacs-lisp
  (push '("\\.js[x]?\\'" . javascript-mode) auto-mode-alist)
  (push '("\\.ts[x]?\\'" . javascript-mode) auto-mode-alist)
#+END_SRC
* Install Packages
#+BEGIN_SRC emacs-lisp
    (setq aieis/packages '(marginalia consult embark embark-consult orderless ace-window helm))
    (defun aieis/install-packages ()
      (interactive)
      (dolist (package aieis/packages)
        (straight-use-package package)))
#+END_SRC
